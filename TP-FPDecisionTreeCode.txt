'''
print("*** Non-Tri Fold Decision Tree with TP - FP ***")
groups = decisionTree(df, prtMut=True)
TP = 0
FP = 0
TN = 0
FN = 0
tmp1 = classifications(groups[0], cancer=True)
tmp2 = classifications(groups[2], cancer=True)
TP += (tmp1[0] + tmp2[0])
FP += (tmp1[1] + tmp2[1])
tmp3 = classifications(groups[1], cancer=False)
tmp4 = classifications(groups[3], cancer=False)
TN += (tmp3[0] + tmp4[0])
FN += (tmp3[1] + tmp4[1])
print(stats(TP, FP, TN, FN))


#Tri fold of
s1 = df.sample(frac=1/3) #, random_state=
t1 = df.drop(labels=s1.index)
s2 = df.drop(labels=s1.index).sample(frac=1/2) #,random_state=
t2 = df.drop(labels=s2.index)
s3 = df.drop(labels=s1.index).drop(labels=s2.index)
t3 = df.drop(labels=s3.index)

print('*** 1st Tri fold for TP-FP as classifier ***')
g1 = triFold(t1, s1, prtMut=True)
TP1 = classifications(g1[0])[0] + classifications(g1[2])[0]
FP1 = classifications(g1[0])[1] + classifications(g1[2])[1]
TN1 = classifications(g1[1], cancer=False)[0] + classifications(g1[3], cancer=False)[0]
FN1 = classifications(g1[1], cancer=False)[1] + classifications(g1[3], cancer=False)[1]
print(stats(TP1, FP1, TN1, FN1))

print('*** 2nd Tri fold for TP-FP as classifier ***')
g2 = triFold(t2, s2, prtMut=True)
TP2 = classifications(g2[0])[0] + classifications(g2[2])[0]
FP2 = classifications(g2[0])[1] + classifications(g2[2])[1]
TN2 = classifications(g2[1], cancer=False)[0] + classifications(g2[3], cancer=False)[0]
FN2 = classifications(g2[1], cancer=False)[1] + classifications(g2[3], cancer=False)[1]
print(stats(TP2, FP2, TN2, FN2))

print('*** 3rd Tri fold for TP-FP as classifier ***')
g3 = triFold(t3, s3, prtMut=True)
TP3 = classifications(g3[0])[0] + classifications(g3[2])[0]
FP3 = classifications(g3[0])[1] + classifications(g3[2])[1]
TN3 = classifications(g3[1], cancer=False)[0] + classifications(g3[3], cancer=False)[0]
FN3 = classifications(g3[1], cancer=False)[1] + classifications(g3[3], cancer=False)[1]
print(stats(TP3, FP3, TN3, FN3))

print(stats((TP1+TP2+TP3)/3, (FP1+ FP2+ FP3)/3 , (TN1+TN2+TN3)/3, (FN1+FN2+FN3)/3, clfr='Averages'))
'''